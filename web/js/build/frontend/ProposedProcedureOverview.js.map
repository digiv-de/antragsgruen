{"version":3,"sources":["frontend/ProposedProcedureOverview.ts"],"names":["ProposedProcedureOverview","$widget","this","interval","initUpdateWidget","prototype","reload","_this","$","get","updateUrl","data","success","$dateField","text","date","$proposalList","html","alert","error","startInterval","window","setInterval","bind","stopInterval","clearInterval","$updateWidget","find","$toggle","change","prop","trigger","exports"],"mappings":"4IAOA,IAAAA,EAAA,WAOI,SAAAA,EAAmBC,GAAAC,KAAAD,QAAAA,EAFXC,KAAAC,SAAmB,KAGvBD,KAAKE,mBA8Cb,OA3CYJ,EAAAK,UAAAC,OAAR,WAAA,IAAAC,EAAAL,KACIM,EAAEC,IAAIP,KAAKQ,UAAW,SAACC,GACdA,EAAKC,SAIVL,EAAKM,WAAWC,KAAKH,EAAKI,MAC1BR,EAAKS,cAAcC,KAAKN,EAAKM,OAJzBC,MAAMP,EAAKQ,UAQfnB,EAAAK,UAAAe,cAAR,WAC0B,OAAlBlB,KAAKC,WAGTD,KAAKC,SAAWkB,OAAOC,YAAYpB,KAAKI,OAAOiB,KAAKrB,MAAO,OAGvDF,EAAAK,UAAAmB,aAAR,WAC0B,OAAlBtB,KAAKC,WAGTkB,OAAOI,cAAcvB,KAAKC,UAC1BD,KAAKC,SAAW,OAGZH,EAAAK,UAAAD,iBAAR,WAAA,IAAAG,EAAAL,KACIA,KAAKwB,cAAgBxB,KAAKD,QAAQ0B,KAAK,qBACvCzB,KAAKc,cAAgBd,KAAKD,QAAQ0B,KAAK,kBACvCzB,KAAKW,WAAaX,KAAKD,QAAQ0B,KAAK,sBACpCzB,KAAKQ,UAAYR,KAAKD,QAAQU,KAAK,cAEnC,IAAIiB,EAAU1B,KAAKwB,cAAcC,KAAK,qBACtCC,EAAQC,OAAO,WACWD,EAAQE,KAAK,YAE/BvB,EAAKD,SACLC,EAAKa,iBAELb,EAAKiB,iBAEVO,QAAQ,WAEnB/B,EAtDA,GAAagC,EAAAhC,0BAAAA","file":"ProposedProcedureOverview.js","sourcesContent":["interface ReloadResult {\n    success: boolean;\n    error?: string;\n    html?: string;\n    date?: string;\n}\n\nexport class ProposedProcedureOverview {\n    private $updateWidget: JQuery;\n    private updateUrl: string;\n    private $proposalList: JQuery;\n    private $dateField: JQuery;\n    private interval: number = null;\n\n    constructor(public $widget: JQuery) {\n        this.initUpdateWidget();\n    }\n\n    private reload() {\n        $.get(this.updateUrl, (data: ReloadResult) => {\n            if (!data.success) {\n                alert(data.error);\n                return;\n            }\n            this.$dateField.text(data.date);\n            this.$proposalList.html(data.html);\n        });\n    }\n\n    private startInterval() {\n        if (this.interval !== null) {\n            return;\n        }\n        this.interval = window.setInterval(this.reload.bind(this), 10000);\n    }\n\n    private stopInterval() {\n        if (this.interval === null) {\n            return;\n        }\n        window.clearInterval(this.interval);\n        this.interval = null;\n    }\n\n    private initUpdateWidget() {\n        this.$updateWidget = this.$widget.find('.autoUpdateWidget');\n        this.$proposalList = this.$widget.find('.reloadContent');\n        this.$dateField = this.$widget.find('.currentDate .date');\n        this.updateUrl = this.$widget.data('reload-url');\n\n        let $toggle = this.$updateWidget.find('#autoUpdateToggle');\n        $toggle.change(() => {\n            let active: boolean = $toggle.prop('checked');\n            if (active) {\n                this.reload();\n                this.startInterval();\n            } else {\n                this.stopInterval();\n            }\n        }).trigger('change');\n    }\n}"]}