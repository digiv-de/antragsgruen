{"version":3,"sources":["frontend/MergeInit.ts"],"names":["MergeInit","$widget","this","$checkboxes","find","$allCheckbox","initExportBtn","initAllCheckbox","prototype","recalcExportBtn","ids","filter","each","idx","el","push","parseInt","getAttribute","split","link","exportLinkTpl","replace","join","attr","_this","on","recalcAllCheckbox","allSelected","noneSelected","$","prop","change","exports"],"mappings":"4HAAA,IAAAA,EAAA,WAKI,SAAAA,EAAoBC,GAAAC,KAAAD,QAAAA,EAChBC,KAAKC,YAAcD,KAAKD,QAAQG,KAAK,oCACrCF,KAAKG,aAAeH,KAAKD,QAAQG,KAAK,cACtCF,KAAKI,gBACLJ,KAAKK,kBAiDb,OA9CYP,EAAAQ,UAAAC,gBAAR,WACI,IAAIC,EAAM,GACVR,KAAKC,YAAYQ,OAAO,YAAYC,KAAK,SAACC,EAAKC,GAC3CJ,EAAIK,KAAKC,SAASF,EAAGG,aAAa,QAAQC,MAAM,KAAK,OAEzD,IAAIC,EAAOjB,KAAKkB,cAAcC,QAAQ,MAAOX,EAAIY,KAAK,MACtDpB,KAAKD,QAAQG,KAAK,mBAAmBmB,KAAK,OAAQJ,IAG9CnB,EAAAQ,UAAAF,cAAR,WAAA,IAAAkB,EAAAtB,KACIA,KAAKkB,cAAgBlB,KAAKD,QAAQG,KAAK,mBAAmBmB,KAAK,QAE/DrB,KAAKD,QAAQwB,GAAG,SAAU,0CAA2C,WACjED,EAAKf,oBAETP,KAAKO,mBAGDT,EAAAQ,UAAAkB,kBAAR,WACI,IAAIC,GAAuB,EACvBC,GAAwB,EAC5B1B,KAAKC,YAAYS,KAAK,SAACC,EAAKC,GACpBe,EAAEf,GAAIgB,KAAK,WACXF,GAAe,EAEfD,GAAc,IAGlBC,EACA1B,KAAKG,aAAayB,KAAK,WAAW,GAAOA,KAAK,iBAAiB,GACxDH,EACPzB,KAAKG,aAAayB,KAAK,WAAW,GAAMA,KAAK,iBAAiB,GAE9D5B,KAAKG,aAAayB,KAAK,iBAAiB,IAIxC9B,EAAAQ,UAAAD,gBAAR,WAAA,IAAAiB,EAAAtB,KACIA,KAAKwB,oBACLxB,KAAKG,aAAa0B,OAAO,WACrBP,EAAKrB,YAAY2B,KAAK,UAAWN,EAAKnB,aAAayB,KAAK,cAE5D5B,KAAKC,YAAY4B,OAAO,WACrBP,EAAKE,uBAGhB1B,EA1DA,GAAagC,EAAAhC,UAAAA","file":"MergeInit.js","sourcesContent":["export class MergeInit {\n    private exportLinkTpl: string;\n    private $checkboxes: JQuery;\n    private $allCheckbox: JQuery;\n\n    constructor(private $widget: JQuery) {\n        this.$checkboxes = this.$widget.find('.toMergeAmendments .selectSingle');\n        this.$allCheckbox = this.$widget.find('.selectAll');\n        this.initExportBtn();\n        this.initAllCheckbox();\n    }\n\n    private recalcExportBtn() {\n        let ids = [];\n        this.$checkboxes.filter(\":checked\").each((idx, el: Element) => {\n            ids.push(parseInt(el.getAttribute('name').split('[')[1]));\n        });\n        let link = this.exportLinkTpl.replace(/IDS/, ids.join(','));\n        this.$widget.find('.exportHolder a').attr('href', link);\n    }\n\n    private initExportBtn() {\n        this.exportLinkTpl = this.$widget.find('.exportHolder a').attr('href');\n\n        this.$widget.on('change', '.toMergeAmendments input[type=checkbox]', () => {\n            this.recalcExportBtn();\n        });\n        this.recalcExportBtn();\n    }\n\n    private recalcAllCheckbox() {\n        let allSelected: boolean = true;\n        let noneSelected: boolean = true;\n        this.$checkboxes.each((idx, el: Element) => {\n            if ($(el).prop(\"checked\")) {\n                noneSelected = false;\n            } else {\n                allSelected = false;\n            }\n        });\n        if (noneSelected) {\n            this.$allCheckbox.prop(\"checked\", false).prop(\"indeterminate\", false);\n        } else if (allSelected) {\n            this.$allCheckbox.prop(\"checked\", true).prop(\"indeterminate\", false);\n        } else {\n            this.$allCheckbox.prop(\"indeterminate\", true);\n        }\n    }\n\n    private initAllCheckbox() {\n        this.recalcAllCheckbox();\n        this.$allCheckbox.change(() => {\n            this.$checkboxes.prop(\"checked\", this.$allCheckbox.prop(\"checked\"));\n        });\n        this.$checkboxes.change(() => {\n           this.recalcAllCheckbox();\n        });\n    }\n}\n"]}